// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String         @id @default(uuid())
  username        String         @unique @map("user_name")
  email           String         @unique @map("user_email")
  firstName       String         @map("user_first_name")
  lastName        String         @map("user_last_name")
  dateOfBirth     DateTime       @map("user_dob")
  dateCreated     DateTime       @default(now()) @map("user_date_created")
  lastLogin       DateTime?      @map("user_last_login")
  isActive        Boolean        @default(true) @map("user_is_active")
  
  // Relations
  role            Role           @relation(fields: [roleId], references: [id])
  roleId          String         @map("role_id")
  authentication  Authentication?
  sessions        Session[]      
  addresses       Address[]

  @@map("users")
}

model Address {
  id          String   @id @default(uuid()) @map("address_id")
  street1      String   @map("address_street_1")
  street2     String?  @map("address_street_2")
  city        String   @map("address_city")
  state       String   @map("address_state")
  postalCode  String   @map("address_postal_code")
  country     String   @map("address_country")
  addressType String   @map("address_type")
  isDefault   Boolean  @default(false) @map("address_is_default")

  // Relations
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @map("user_id")

  @@map("addresses")
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique @map("role_name")
  description String?  @map("role_desc")
  users       User[]

  @@map("roles")
}

model Authentication {
  id              String    @id @default(uuid())
  passwordHash    String    @map("auth_password_hash")
  passwordReset   String?   @map("auth_password_reset")
  loginAttempts   Int       @default(0) @map("auth_login_attempts")
  lockoutEndTime  DateTime? @map("auth_lockout_end_time")
  
  // Relations
  user            User      @relation(fields: [userId], references: [id])
  userId          String    @unique @map("user_id")

  @@map("authentications")
}

model Session {
  id                String    @id @default(uuid()) @map("session_id")
  userId            String    @map("user_id")
  token             String    @unique @map("session_token")
  expiry            DateTime  @map("session_expiry")
  type              String    @map("session_type")
  creationTime      DateTime  @default(now()) @map("session_creation_time")
  lastAccessed      DateTime  @default(now()) @map("session_last_accessed")

  // Relations
  user              User      @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model Product {
  id              String         @id @default(uuid()) @map("prod_id")
  name            String         @map("prod_name")
  description     String?        @map("prod_desc")
  price           Decimal        @map("prod_price") @db.Decimal(10, 2)
  stockQuantity   Int            @map("prod_stock_quantity")
  isActive        Boolean        @default(true) @map("prod_is_active")
  sku             String         @unique @map("prod_sku")
  imageUrl        String?        @map("prod_image_url")
  dateAdded       DateTime       @default(now()) @map("prod_added_date")
  dateModified    DateTime?      @map("prod_modified_date") @updatedAt

  // Relations
  category        Category       @relation(fields: [categoryId], references: [id])
  categoryId      String         @map("category_id")

  // Indexes
  @@index([categoryId])
  @@index([sku])
  @@index([isActive])
  
  @@map("products")
}

model Category {
  id          String    @id @default(uuid()) @map("category_id")
  name        String    @unique @map("category_name")
  description String?   @map("category_desc")
  isActive    Boolean   @default(true) @map("category_is_active")

  // Relations
  products    Product[]

  @@index([isActive])
  @@map("categories")
}